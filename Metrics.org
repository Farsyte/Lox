* Code Metrics for no particular reason

** PMCCABE: finding the most complex bits

NOTE: The "Traditional" way basically counts 1 for the method, plus 1
for each branch; and in a switch statement, it counts 1 for each case.
The "Modified" counts the whole switch as 1.

Some projects will establish a hard line for the maximum of some code
metric (last time I saw this it was 10 being the "you shall not pass"
value), but I think that may not be the best use.

I prefer to merely use the Modified Complexity as a guilde to help me
find the functions that might need a bit of extra care; I start at the
high end and work down the list.

Based on this, if I were coming back to this project in this state after
doing something else for a bit, I'd start with Scanner::scanToken, then
work through those parser methods, and so on, just reading through and
keeping an eye out for weirdness.

#+begin_src text

  Modified McCabe Cyclomatic Complexity
  |   Traditional McCabe Cyclomatic Complexity
  |       |    # Statements in function
  |       |        |   First line of function
  |       |        |       |   # lines in function
  |       |        |       |       |  filename(definition line number):function
  |       |        |       |       |           |

  202     228     551     n/a     2274    [PROJECT TOTAL]

  Files containing significant complexity:

  98      105     248     1       497     lox/Parser.java [FILE TOTAL]
  53      72      121     1       224     lox/Scanner.java [FILE TOTAL]
  17      17      54      1       100     lox/Lox.java [FILE TOTAL]
  13      13      61      1       135     tool/GenerateAst.java [FILE TOTAL]
  13      13      26      1       67      lox/Environment.java [FILE TOTAL]

  17      36      65      55      80      j/jlox/src/farsyte/lox/Scanner.java(55): Scanner::scanToken

  9       9       22      402     32      j/jlox/src/farsyte/lox/Parser.java(402): Parser::primary
  8       8       27      158     52      j/jlox/src/farsyte/lox/Parser.java(158): Parser::forStatement
  8       8       15      100     11      j/jlox/src/farsyte/lox/Parser.java(100): Parser::statement

  5       5       7       162     13      j/jlox/src/farsyte/lox/Scanner.java(162): Scanner::number
  5       5       22      98      37      j/jlox/src/farsyte/tool/GenerateAst.java(98): GenerateAst::defineType
  5       5       10      145     16      j/jlox/src/farsyte/lox/Scanner.java(145): Scanner::string
  5       5       1       215     5       j/jlox/src/farsyte/lox/Scanner.java(215): Scanner::isAlpha

  4       4       9       383     18      j/jlox/src/farsyte/lox/Parser.java(383): Parser::finishCall
  4       4       9       363     19      j/jlox/src/farsyte/lox/Parser.java(363): Parser::call
  4       4       9       29      12      j/jlox/src/farsyte/lox/Parser.java(29): Parser::declaration
  4       4       13      74      25      j/jlox/src/farsyte/lox/Parser.java(74): Parser::function
  4       4       12      251     22      j/jlox/src/farsyte/lox/Parser.java(251): Parser::assignment
  4       4       11      42      19      j/jlox/src/farsyte/lox/Parser.java(42): Parser::classDeclaration
  4       11      7       478     19      j/jlox/src/farsyte/lox/Parser.java(478): Parser::synchronize

  3       3       7       84      13      j/jlox/src/farsyte/tool/GenerateAst.java(84): GenerateAst::defineVisitor
  3       3       7       40      14      j/jlox/src/farsyte/lox/Environment.java(40): Environment::assign
  3       3       7       18      14      j/jlox/src/farsyte/lox/Lox.java(18): Lox::main
  3       3       7       136     8       j/jlox/src/farsyte/lox/Scanner.java(136): Scanner::identifier
  3       3       6       33      7       j/jlox/src/farsyte/lox/Lox.java(33): Lox::runFile
  3       3       6       19      11      j/jlox/src/farsyte/lox/LoxInstance.java(19): LoxInstance::get
  3       3       6       185     7       j/jlox/src/farsyte/lox/Scanner.java(185): Scanner::match
  3       3       5       435     9       j/jlox/src/farsyte/lox/Parser.java(435): Parser::match
  3       3       5       22      13      j/jlox/src/farsyte/lox/Environment.java(22): Environment::get
  3       3       5       211     20      j/jlox/src/farsyte/lox/Parser.java(211): Parser::block
  3       3       21      50      33      j/jlox/src/farsyte/tool/GenerateAst.java(50): GenerateAst::defineAst
  3       3       13      41      14      j/jlox/src/farsyte/lox/Lox.java(41): Lox::runPrompt
  3       3       11      56      17      j/jlox/src/farsyte/lox/Lox.java(56): Lox::run
#+end_src

Not Listed:
- Complexity 2: 23 methods with a single branch.
- Complexity 1: 27 methods with no branches.

** SLOCCOUNT: Cost and Schedule Estimates

Output of "sloccount" for this project,
observed when Section II (chapter 13)
was completed:

#+begin_src text

  SLOC    Directory       SLOC-by-Language (Sorted)
  1808    j               java=1808
  177     c               ansic=177

  Totals grouped by language (dominant language first):
  java:          1808 (91.08%)
  ansic:          177 (8.92%)

  Total Physical Source Lines of Code (SLOC)                = 1,985
  Development Effort Estimate, Person-Years (Person-Months) = 0.41 (4.93)
   (Basic COCOMO model, Person-Months = 2.4 * (KSLOC**1.05))
  Schedule Estimate, Years (Months)                         = 0.38 (4.58)
   (Basic COCOMO model, Months = 2.5 * (person-months**0.38))
  Estimated Average Number of Developers (Effort/Schedule)  = 1.08
  Total Estimated Cost to Develop                           = $ 55,500
   (average salary = $56,286/year, overhead = 2.40).

  SLOCCount, Copyright (C) 2001-2004 David A. Wheeler
  SLOCCount is Open Source Software/Free Software, licensed under the GNU GPL.
  SLOCCount comes with ABSOLUTELY NO WARRANTY, and you are welcome to
  redistribute it under certain conditions as specified by the GNU GPL license;
  see the documentation for details.
  Please credit this data as "generated using David A. Wheeler's 'SLOCCount'."

#+end_src

I have no idea if the configured values for SLOCCOUNT
are appropriate. I made no effort to tweak. In any case,
is it sane to say that the "j/jlox" body of work could be
estimated as a job that would take one 56k USD/year programmer
about five months and cost 55k USD including overhead?
