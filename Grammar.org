* Cumulative LOX Grammar

This file will record the various grammars used.

#+begin_src text

  program         → declaration* EOF ;
  declaration     → varDecl | statement ;

  statement       → exprStmt
                  | ifStmt
                  | printStmt
                  | whileStmt
                  | block
                  ;

  whileStmt       → "while" "(" expression ")" statement ;

  ifStmt          → "if" "(" expression ")" statement ( "else" statement )? ;

  block           → "{" declaration* "}" ;
  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | logic_or ;
  logic_or        → logic_and ( "or" logic_and )* ;
  logic_and       → equality ( "and" equality )* ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

Grammer above includes text from these sections:

- 5.1.3 A Grammar for Lox expressions
- 6.1 Ambiguity and the Parsing Game
- 8.1 Statements
- 8.2.1 Variable Syntax
- 8.4.1 Assignment Syntax
- 8.5.2 Block syntax and semantics
- 9.2 Conditional Execution
- 9.3 Logical Operators
- 9.4 While Loops
