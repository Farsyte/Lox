* LOX Grammar Snips

This file will record the various grammars used.

* 5.1.3 A Grammar for Lox expressions

#+begin_src text
  expression      → literal
                  | unary
                  | binary
                  | grouping ;

  literal         → NUMBER | STRING | "true" | "false" | "nil" ;
  grouping        → "(" expression ")" ;
  unary           → ( "-" | "!" ) expression ;
  binary          → expression operator expression ;
  operator        → "==" | "!=" | "<" | "<=" | ">" | ">="
                  | "+" | "-" | "*" | "/" ;
#+end_src

* 6.1 Ambiguity and the Parsing Game

Reworking the 5.1.3 grammar to provide operator precedence
and set things up to be recursive-descent friendly:

#+begin_src text
  expression      → equalithy
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → NUMBER | STRING | "true" | "false" | "nil"
                  | "(" expression ")" ;

#+end_src

* 8.1 Statements

Adding Statements to the grammer gives us:

#+begin_src text
  program         → statement* EOF ;
  statement       → exprStmt | printStmt ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → equalithy
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → NUMBER | STRING | "true" | "false" | "nil"
                  | "(" expression ")" ;

#+end_src

* 8.2.1 Variable Syntax

Adding Variables to the grammer gives us:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;
  statement       → exprStmt | printStmt ;

  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → equalithy
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

* 8.4.1 Assignment Syntax

Adding Assignments to the grammer gives us:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;
  statement       → exprStmt | printStmt ;

  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | equality ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

* 8.5.2 Block syntax and semantics

Adding blocks to the grammar:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;
  statement       → exprStmt | printStmt  | block ;

  block           → "{" declaration* "}" ;
  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | equality ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

* 9.2 Conditional Execution

Adding "if" statements to the grammar:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;

  statement       → exprStmt
                  | ifStmt
                  | printStmt
                  | block
                  ;

  ifStmt          → "if" "(" expression ")" statement ( "else" statement )? ;

  block           → "{" declaration* "}" ;
  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | equality ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

* 9.3 Logical Operators

Adding "and" and "or" operators to the grammar:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;

  statement       → exprStmt
                  | ifStmt
                  | printStmt
                  | block
                  ;

  ifStmt          → "if" "(" expression ")" statement ( "else" statement )? ;

  block           → "{" declaration* "}" ;
  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | logic_or ;
  logic_or        → logic_and ( "or" logic_and )* ;
  logic_and       → equality ( "and" equality )* ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src

* 9.4 While Loops

Adding "while" statements to the grammar:

#+begin_src text
  program         → declaration* EOF ;
  declaration     → varDecl | statement ;

  statement       → exprStmt
                  | ifStmt
                  | printStmt
                  | whileStmt
                  | block
                  ;

  whileStmt       → "while" "(" expression ")" statement ;

  ifStmt          → "if" "(" expression ")" statement ( "else" statement )? ;

  block           → "{" declaration* "}" ;
  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment ;
  assignment      → IDENTIFIER = assignment | logic_or ;
  logic_or        → logic_and ( "or" logic_and )* ;
  logic_and       → equality ( "and" equality )* ;
  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | primary ;

  primary         → "true" | "false" | "nil"
                  | NUMBER | STRING
                  | "(" expression ")"
                  | IDENTIFIER ;
#+end_src
