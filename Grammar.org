* Cumulative Grammar Definitions

In chapter 21 of the book, §21.1 "Statements", the book re-iterates
the "statement" and "declaration" productions, in a slightly different
order, and missing the "break" possibility added as a challenge.

#+begin_src text
  program         → declaration* EOF ;

  declaration     → varDecl
                  | funDecl
                  | statement
                  | classDecl
                  ;

  statement       → exprStmt
                  | printStmt
                  | block
                  | ifStmt
                  | whileStmt
                  | forStmt
                  | breakStmt
                  | returnStmt
                  ;

  classDecl       → "class" IDENTIFIER ( "<" IDENTIFIER )? "{" function* "}" ;
  funDecl         → "fun" function ;
  function        → IDENTIFIER "(" parameters? ")" block ;
  parameters      → IDENTIFIER ( "," IDENTIFIER )* ;

  returnStmt      → "return" expression? ";" ;

  # Not encoded in grammar: "break" must only exist
  # within the body of a "for" or "while" statement.

  breakStmt       → "break" ";"

  forStmt         → "for" "(" ( varDecl | exprStmt | ";" )
                     expression? ";" expression? ")" statement ;

  ifStmt          → "if" "(" expression ")" statement
                  ( "else" statement )? ;

  whileStmt       → "while" "(" expression ")" statement ;

  block           → "{" declaration* "}" ;

  varDecl         → "var" IDENTIFIER ( "=" expression )? ";" ;
  exprStmt        → expression ";" ;
  printStmt       → "print" expression ";" ;

  expression      → assignment

  assignment      → ( call "." )? IDENTIFIER = assignment
                  | logic_or
                  ;

  logic_or        → logic_and ( "or" logic_and )* ;
  logic_and       → equality ( "and" equality )* ;

  equality        → comparison ( ( "!=" | "==" ) comparison )* ;
  comparison      → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
  term            → factor ( ( "-" | "+" ) factor )* ;
  factor          → unary ( ( "/" | "*" ) unary )* ;

  unary           → ( "!" | "-" ) unary
                  | call
                  ;

  call            → primary ( "(" arguments? ")"
                            | "." IDENTIFIER
                            )* ;

  arguments       → expression ( "," expression )* ;

  primary         → "true" | "false" | "nil"
                  | "(" expression ")"
                  | STRING
                  | NUMBER
                  | "this"
                  | "super" "." IDENTIFIER
                  ;
#+end_src
